// C:\Users\mucah_wi2yyc2\Desktop\mini_CMS_Desktop_App\backend\models\actual.go

package models

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/google/uuid"
	"github.com/uptrace/bun"
)

// Aircraft Type dÃ¶nÃ¼ÅŸÃ¼m haritasÄ±
var aircraftTypeMapping = map[string]string{
	"310": "DAR GÃ–VDE", "319": "DAR GÃ–VDE", "320": "DAR GÃ–VDE", "321": "DAR GÃ–VDE", "32D": "DAR GÃ–VDE", "32H": "DAR GÃ–VDE",
	"37B": "DAR GÃ–VDE", "3A0": "DAR GÃ–VDE", "3A1": "DAR GÃ–VDE", "3HD": "DAR GÃ–VDE", "3S2": "DAR GÃ–VDE", "3VF": "DAR GÃ–VDE",
	"6VF": "DAR GÃ–VDE", "734": "DAR GÃ–VDE", "737": "DAR GÃ–VDE", "738": "DAR GÃ–VDE", "739": "DAR GÃ–VDE", "73D": "DAR GÃ–VDE",
	"73E": "DAR GÃ–VDE", "73H": "DAR GÃ–VDE", "73M": "DAR GÃ–VDE", "73N": "DAR GÃ–VDE", "73P": "DAR GÃ–VDE", "73S": "DAR GÃ–VDE",
	"73V": "DAR GÃ–VDE", "73Z": "DAR GÃ–VDE", "74D": "DAR GÃ–VDE", "78H": "DAR GÃ–VDE", "78I": "DAR GÃ–VDE", "78L": "DAR GÃ–VDE",
	"78T": "DAR GÃ–VDE", "79Y": "DAR GÃ–VDE", "79Z": "DAR GÃ–VDE", "7A8": "DAR GÃ–VDE", "7B8": "DAR GÃ–VDE", "7C3": "DAR GÃ–VDE",
	"7D3": "DAR GÃ–VDE", "7VF": "DAR GÃ–VDE", "8VF": "DAR GÃ–VDE", "9VF": "DAR GÃ–VDE", "A20": "DAR GÃ–VDE", "A21": "DAR GÃ–VDE",
	"A32": "DAR GÃ–VDE", "A78": "DAR GÃ–VDE", "B32": "DAR GÃ–VDE", "B78": "DAR GÃ–VDE", "C32": "DAR GÃ–VDE", "D23": "DAR GÃ–VDE",
	"D32": "DAR GÃ–VDE", "D73": "DAR GÃ–VDE", "E20": "DAR GÃ–VDE", "E21": "DAR GÃ–VDE", "E32": "DAR GÃ–VDE", "G32": "DAR GÃ–VDE",
	"HD3": "DAR GÃ–VDE", "K21": "DAR GÃ–VDE", "L20": "DAR GÃ–VDE", "L21": "DAR GÃ–VDE", "M32": "DAR GÃ–VDE", "N32": "DAR GÃ–VDE",
	"N78": "DAR GÃ–VDE", "N79": "DAR GÃ–VDE", "R21": "DAR GÃ–VDE", "SA1": "DAR GÃ–VDE", "SC0": "DAR GÃ–VDE", "SL7": "DAR GÃ–VDE",
	"SL8": "DAR GÃ–VDE", "SX1": "DAR GÃ–VDE", "SY0": "DAR GÃ–VDE", "TC0": "DAR GÃ–VDE", "TC1": "DAR GÃ–VDE", "TC2": "DAR GÃ–VDE",
	"TC3": "DAR GÃ–VDE", "TC4": "DAR GÃ–VDE", "TC5": "DAR GÃ–VDE", "TC6": "DAR GÃ–VDE", "TC7": "DAR GÃ–VDE", "TC8": "DAR GÃ–VDE",
	"TC9": "DAR GÃ–VDE", "TKB": "DAR GÃ–VDE", "TKD": "DAR GÃ–VDE", "TKE": "DAR GÃ–VDE", "TKS": "DAR GÃ–VDE", "U21": "DAR GÃ–VDE",
	"V20": "DAR GÃ–VDE", "V21": "DAR GÃ–VDE", "VFA": "DAR GÃ–VDE", "VFB": "DAR GÃ–VDE", "VFC": "DAR GÃ–VDE", "VFD": "DAR GÃ–VDE",
	"VFE": "DAR GÃ–VDE", "VFM": "DAR GÃ–VDE", "VFQ": "DAR GÃ–VDE", "VFS": "DAR GÃ–VDE", "VFT": "DAR GÃ–VDE", "VFX": "DAR GÃ–VDE",
	"VIP": "DAR GÃ–VDE", "W20": "DAR GÃ–VDE", "W21": "DAR GÃ–VDE", "W31": "DAR GÃ–VDE", "W32": "DAR GÃ–VDE", "W33": "DAR GÃ–VDE",
	"W34": "DAR GÃ–VDE", "X20": "DAR GÃ–VDE", "X21": "DAR GÃ–VDE", "X32": "DAR GÃ–VDE", "Y20": "DAR GÃ–VDE", "Y21": "DAR GÃ–VDE",
	"Z73": "DAR GÃ–VDE", "ZB1": "DAR GÃ–VDE", "ZB2": "DAR GÃ–VDE", "ZB3": "DAR GÃ–VDE",

	"330": "GENÄ°Åž GÃ–VDE", "332": "GENÄ°Åž GÃ–VDE", "333": "GENÄ°Åž GÃ–VDE", "33A": "GENÄ°Åž GÃ–VDE", "33B": "GENÄ°Åž GÃ–VDE", "33C": "GENÄ°Åž GÃ–VDE",
	"33E": "GENÄ°Åž GÃ–VDE", "33F": "GENÄ°Åž GÃ–VDE", "33H": "GENÄ°Åž GÃ–VDE", "33I": "GENÄ°Åž GÃ–VDE", "33J": "GENÄ°Åž GÃ–VDE", "33M": "GENÄ°Åž GÃ–VDE",
	"33N": "GENÄ°Åž GÃ–VDE", "33P": "GENÄ°Åž GÃ–VDE", "33R": "GENÄ°Åž GÃ–VDE", "33S": "GENÄ°Åž GÃ–VDE", "33T": "GENÄ°Åž GÃ–VDE", "33V": "GENÄ°Åž GÃ–VDE",
	"33X": "GENÄ°Åž GÃ–VDE", "33Y": "GENÄ°Åž GÃ–VDE", "33Z": "GENÄ°Åž GÃ–VDE", "340": "GENÄ°Åž GÃ–VDE", "343": "GENÄ°Åž GÃ–VDE", "350": "GENÄ°Åž GÃ–VDE",
	"35D": "GENÄ°Åž GÃ–VDE", "35E": "GENÄ°Åž GÃ–VDE", "3MF": "GENÄ°Åž GÃ–VDE", "74F": "GENÄ°Åž GÃ–VDE", "74G": "GENÄ°Åž GÃ–VDE", "74I": "GENÄ°Åž GÃ–VDE",
	"777": "GENÄ°Åž GÃ–VDE", "77A": "GENÄ°Åž GÃ–VDE", "77B": "GENÄ°Åž GÃ–VDE", "77K": "GENÄ°Åž GÃ–VDE", "77M": "GENÄ°Åž GÃ–VDE", "77R": "GENÄ°Åž GÃ–VDE",
	"77X": "GENÄ°Åž GÃ–VDE", "787": "GENÄ°Åž GÃ–VDE", "789": "GENÄ°Åž GÃ–VDE", "B74": "GENÄ°Åž GÃ–VDE", "C74": "GENÄ°Åž GÃ–VDE", "D33": "GENÄ°Åž GÃ–VDE",
	"H77": "GENÄ°Åž GÃ–VDE", "I77": "GENÄ°Åž GÃ–VDE", "TK3": "GENÄ°Åž GÃ–VDE", "TK7": "GENÄ°Åž GÃ–VDE",
}

// Crew Type helper: FlightPosition'a gÃ¶re ekip tipi atar
var flightCrewPositions = map[string]bool{
	"C1": true, "C2": true, "C3": true, "C4": true, "CI": true, "CN": true,
	"J1": true, "J2": true, "P1": true, "P2": true, "P3": true, "P4": true, "P5": true, "P6": true,
}

var cabinCrewPositions = map[string]bool{
	"P": true, "L": true, "V": true, "F": true, "K": true, "E": true, "N": true,
	"Y": true, "Q": true, "Z": true, "B": true, "H": true,
}

// ==========================
// === Model Definition ====
// ==========================

type Actual struct {
	bun.BaseModel `bun:"actuals"`

	DataID        uuid.UUID `bun:"data_id,pk,type:uuid,default:gen_random_uuid()" json:"data_id"`
	UÃ§uÅŸID        string    `bun:"ucus_id" json:"flight_id"`
	ActivityCode  string    `json:"activity_code"`
	Name          string    `json:"name"`
	Surname       string    `json:"surname"`
	BaseFilo      string    `json:"base_filo"`
	Class         string    `json:"class"`
	DeparturePort string    `json:"departure_port"`
	ArrivalPort   string    `json:"arrival_port"`

	DepartureTime time.Time `json:"departure_time"`
	ArrivalTime   time.Time `json:"arrival_time"`

	PersonID string `json:"person_id"`

	PlaneCmsType string `json:"plane_cms_type"`
	AircraftType string `json:"aircraft_type"`

	PlaneTailName  string    `json:"plane_tail_name"`
	TripID         string    `json:"trip_id"`
	GroupCode      string    `json:"group_code"`
	FlightPosition string    `json:"flight_position"`
	FlightNo       string    `json:"flight_no"`
	CheckinDate    time.Time `json:"checkin_date"`
	DutyStart      time.Time `json:"duty_start"`
	DutyEnd        time.Time `json:"duty_end"`
	PeriodMonth    string    `json:"period_month"`
}

// ==========================
// === Utility Functions ====
// ==========================

// ParseTimeFromUnixMs: Unix milisaniye stringini time.Time'a dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
// DÄ±ÅŸarÄ±dan eriÅŸilebilir (fonksiyon adÄ± bÃ¼yÃ¼k harfle baÅŸlÄ±yor).
func ParseTimeFromUnixMs(value string) (time.Time, error) {
	ts, err := strconv.ParseInt(value, 10, 64)
	if err != nil {
		return time.Time{}, fmt.Errorf("zaman (Unix Ms) ayrÄ±ÅŸtÄ±rÄ±lamadÄ± '%s': %w", value, err)
	}
	return time.Unix(ts/1000, (ts%1000)*int64(time.Millisecond)), nil
}

func ParseTimeFromDMYHMS(raw string) (*time.Time, error) {
	raw = strings.TrimSpace(raw)
	if raw == "" {
		return nil, fmt.Errorf("boÅŸ tarih deÄŸeri")
	}

	// ðŸ”„ Ä°zin verilen formatlar
	formats := []string{
		"02.01.2006 15:04:05",
		"02/01/2006 15:04:05", // <- gelen veri bu olabilir
	}

	for _, layout := range formats {
		if t, err := time.ParseInLocation(layout, raw, time.Local); err == nil {
			return &t, nil
		}
	}

	return nil, fmt.Errorf("geÃ§ersiz format: '%s'", raw)
}

func (a *Actual) SetPlaneCmsType(cmsType string) {
	a.PlaneCmsType = cmsType
	a.AircraftType = GetAircraftTypeFromCmsType(cmsType)
}

// ==========================
// === Classification Rules ===
// ==========================

func GetAircraftTypeFromCmsType(cmsType string) string {
	if aircraftType, ok := aircraftTypeMapping[cmsType]; ok {
		return aircraftType
	}
	return "BÄ°LÄ°NMÄ°YOR"
}

func GetDutyTypeFromActual(actual *Actual) string {
	if actual.FlightPosition == "DH" {
		return "KonumlandÄ±rma"
	}
	switch actual.GroupCode {
	case "SIM":
		return "SimÃ¼latÃ¶r"
	case "GT":
		if strings.EqualFold(actual.ActivityCode, "BUS") || strings.EqualFold(actual.ActivityCode, "OAF") {
			return "KonumlandÄ±rma"
		}
		return "DiÄŸer GÃ¶rev"
	case "OTH":
		return "AÃ§Ä±k Mesai"
	case "FLT":
		return "Yolculu UÃ§uÅŸlar"
	}
	return "DiÄŸer GÃ¶rev"
}

func GetCrewTypeFromFlightPosition(flightPosition string) string {
	normalized := strings.ToUpper(flightPosition)
	if flightCrewPositions[normalized] {
		return "UÃ§uÅŸ Ekibi"
	}
	if cabinCrewPositions[normalized] {
		return "Kabin Ekibi"
	}
	return "UÃ§uÅŸ Ekibi"
}
